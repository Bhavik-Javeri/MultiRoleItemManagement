@using ItemManagement.Models.ViewModels
@model List<ItemManagement.Models.ViewModels.ItemViewModel>

@{
    ViewData["Title"] = null;
    Layout = "_Layout";
}

<div class="container-fluid px-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0 text-gray-800">
            <i class="fas fa-box-open me-2"></i>Menu Items
        </h1>
    </div>

    <div class="card mb-4">
        <div class="card-body">
            <form id="priceFilterForm" class="row g-3 align-items-end">
                <div class="col-md-3">
                    <label for="minPrice" class="form-label">Min Price</label>
                    <input type="number" class="form-control" id="minPrice" name="minPrice" min="0" step="0.01" placeholder="0">
                </div>
                <div class="col-md-3">
                    <label for="maxPrice" class="form-label">Max Price</label>
                    <input type="number" class="form-control" id="maxPrice" name="maxPrice" min="0" step="0.01" placeholder="No Limit">
                </div>
                <div class="col-md-3 align-self-end">
                    <button type="submit" class="btn btn-primary">Apply</button>
                    <button type="button" class="btn btn-secondary ms-2" id="clearPriceFilter">Clear</button>
                </div>
            </form>
        </div>
    </div>

    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 g-4">
        @foreach (var item in Model)
        {
            <div class="col">
                <div class="card h-100 shadow-sm hover-shadow">
                    <div class="position-relative">
                        @if (!string.IsNullOrEmpty(item.ImageUrl))
                        {
                            <img src="@item.ImageUrl" class="card-img-top item-image" alt="@item.Name">
                        }
                        else
                        {
                            <div class="card-img-top item-image-placeholder d-flex align-items-center justify-content-center bg-light">
                                <i class="fas fa-image fa-3x text-muted"></i>
                            </div>
                        }
                    </div>
                    <div class="card-body d-flex flex-column flex-grow-1">
                        <h5 class="card-title text-truncate mb-2" title="@item.Name">@item.Name</h5>
                        <small class="text-muted mb-2">
                            <i class="fas fa-store me-1"></i>@item.StoreName
                        </small>
                        <p class="card-text text-muted small item-description">@item.Description</p>
                        <div class="d-flex justify-content-between align-items-center mb-2 mt-auto">
                            <span class="h5 mb-0 text-primary">₹@item.Price.ToString("N2")</span>
                            <span class="badge bg-info">
                                <i class="fas fa-box me-1"></i>@item.Quantity
                            </span>
                        </div>
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="badge @(item.categoryType == Category.Veg ? "bg-success" : item.categoryType == Category.NonVeg ? "bg-danger" : item.categoryType == Category.Egg ? "bg-warning" : "bg-secondary")">
                                <i class="fas fa-utensils me-1"></i>@item.categoryType
                            </span>
                        </div>
                    </div>
                    <div class="card-footer bg-transparent border-top-0 mt-auto">
                        <form asp-controller="Cart" asp-action="AddToCart" method="post" class="d-flex align-items-center justify-content-between">
                            <input type="hidden" name="id" value="@item.Id" />
                            <input type="hidden" name="price" value="@item.Price" />
                            <input type="number" name="quantity" min="1" value="1" max="@item.Quantity" class="form-control form-control-sm quantity-input" style="width:60px; margin-right: 8px;" data-available="@item.Quantity" />
                            <button type="submit" class="btn btn-primary btn-sm add-to-cart-btn"><i class="fas fa-cart-plus me-1"></i>Add to Cart</button>
                        </form>
                    </div>
                </div>
            </div>
        }
    </div>

    @if (Model == null || !Model.Any())
    {
        <div class="text-center py-5">
            <i class="fas fa-box-open fa-4x text-muted mb-3"></i>
            <h4 class="text-muted">No Items Found</h4>
            <p class="text-muted">Try adjusting your filters or add new items.</p>
        </div>
    }
</div>

<!-- Toast Notification -->
<div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 9999;">
    <div id="cartToast" class="toast align-items-center text-bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            @* <div class="toast-body">
                Item added to cart!
            </div> *@
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

<style>
    .item-image {
        height: 200px;
        object-fit: cover;
        width: 100%;
    }

    .item-image-placeholder {
        height: 200px;
        background-color: #f8f9fa;
        width: 100%;
    }

    .hover-shadow {
        transition: all 0.3s ease;
    }

    .hover-shadow:hover {
        transform: translateY(-5px);
    }

    .card {
        transition: all 0.3s ease;
        display: flex;
        flex-direction: column;
    }

    .card:hover {
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;
    }

    .badge {
        font-weight: 500;
        padding: 0.5em 0.8em;
    }

    .btn-group .btn {
        flex: 1;
    }

    .card-body {
        /* Removed min-height to reduce unnecessary space */
    }

    .card-title {
        font-size: 1.1rem;
        line-height: 1.4;
    }

    .card-text {
        font-size: 0.9rem;
        line-height: 1.4;
    }

    .item-description {
        height: 60px; /* Adjust as needed based on how many lines you want to show */
        overflow-y: auto;
    }
</style>
@section Scripts {
    <script>
        document.querySelectorAll('form[asp-action="AddToCart"]').forEach(form => {
            form.addEventListener('submit', function (e) {
                e.preventDefault();
                const formData = new FormData(this);
                fetch(this.action, {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // var toastEl = document.getElementById('cartToast');
                        // var toast = new bootstrap.Toast(toastEl);
                        // toast.show();
                    } else {
                        alert('Failed to add item to cart.');
                    }
                })
                .catch(() => alert('Error adding item to cart.'));
            });
        });

        document.querySelectorAll('.quantity-input').forEach(function(input) {
            input.addEventListener('input', function() {
                var max = parseInt(this.getAttribute('max'));
                if (parseInt(this.value) > max) {
                    alert('You cannot order more than available quantity (' + max + ').');
                    this.value = max;
                }
            });
        });

        // Price range filter logic
        document.getElementById('priceFilterForm').addEventListener('submit', function(e) {
            e.preventDefault();
            var min = parseFloat(document.getElementById('minPrice').value) || 0;
            var max = parseFloat(document.getElementById('maxPrice').value) || Infinity;
            document.querySelectorAll('.card.h-100').forEach(function(card) {
                var priceText = card.querySelector('.h5.text-primary').textContent.replace(/[^\d.]/g, '');
                var price = parseFloat(priceText);
                if ((price >= min) && (price <= max)) {
                    card.parentElement.style.display = '';
                } else {
                    card.parentElement.style.display = 'none';
                }
            });
        });
        document.getElementById('clearPriceFilter').addEventListener('click', function() {
            document.getElementById('minPrice').value = '';
            document.getElementById('maxPrice').value = '';
            document.querySelectorAll('.card.h-100').forEach(function(card) {
                card.parentElement.style.display = '';
            });
        });
    </script>
}
}
 