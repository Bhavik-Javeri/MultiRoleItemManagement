using System.ComponentModel.DataAnnotations;
using System;
using System.ComponentModel.DataAnnotations;
using ItemManagement.Model; // Needed to reference ItemType enum

namespace ItemManagement.Model.DTO
{
    public class ItemDto
    {
        // Nullable for creation (ID will be generated by backend), populated for updates and display.
        public Guid? Id { get; set; }

        [Required(ErrorMessage = "Item Name is required.")]
        [StringLength(255, ErrorMessage = "Item Name cannot exceed 255 characters.")]
        public string Name { get; set; } = string.Empty;

        [StringLength(1000, ErrorMessage = "Description cannot exceed 1000 characters.")]
        public string? Description { get; set; }

        [Required(ErrorMessage = "Price is required.")]
        [Range(0.01, double.MaxValue, ErrorMessage = "Price must be greater than zero.")]
        public decimal Price { get; set; }

        [Required(ErrorMessage = "Quantity is required.")]
        [Range(0, int.MaxValue, ErrorMessage = "Quantity must be a non-negative number.")]
        public int Quantity { get; set; }

        [StringLength(500, ErrorMessage = "Image URL cannot exceed 500 characters.")]
        public string? ImageUrl { get; set; } // Path or URL to the item image

        [Required(ErrorMessage = "Item Type is required.")]
        // This will be a string in DTO to allow flexible input from frontend (e.g., "Veg", "NonVeg", "Egg")
        public string categoryType { get; set; } = Category.Veg.ToString(); // Default to "Veg"

        // StoreId is required when creating or updating an item as it must belong to a store.
        // It's nullable here to allow flexibility if, for instance, a SuperAdmin doesn't explicitly assign a store
        // during *their* creation flow, and it's derived from the StoreAdmin's context.
        [Required(ErrorMessage = "Store ID is required.")]
        public Guid? StoreId { get; set; }

        // For display purposes, to show the name of the associated store.
        public string? StoreName { get; set; }

        // For toggling active status.
        public bool IsActive { get; set; } = true;

        // --- Static Mapping Methods (from Entity to DTO) ---

        /// <summary>
        /// Maps a single Item entity to an ItemDto.
        /// </summary>
        /// <param name="item">The Item entity to map.</param>
        /// <returns>A new ItemDto populated with data from the entity.</returns>
        public static ItemDto FromEntity(Item item)
        {
            return new ItemDto
            {
                Id = item.Id,
                Name = item.Name,
                Description = item.Description,
                Price = item.Price,
                Quantity = item.Quantity,
                ImageUrl = item.ImageUrl,
                categoryType = item.categoryType.ToString(), // Correctly maps ItemType enum to string
                StoreId = item.StoreId,
                StoreName = item.Store?.Name, // Access Store.Name safely via navigation property
                IsActive = item.IsActive
            };
        }

        /// <summary>
        /// Maps a list of Item entities to a list of ItemDto.
        /// </summary>
        /// <param name="items">The list of Item entities to map.</param>
        /// <returns>A new list of ItemDto.</returns>
        public static List<ItemDto> FromEntities(List<Item> items)
        {
            return items.Select(item => FromEntity(item)).ToList();
        }

        // Removed static Item Mapping(ItemDto itemDto) and List<Item> Mapping(List<ItemDto> itemDtos)
        // These conversions are better handled explicitly within the ItemService.
    }
}
